package sbsjava;

import practice.입출력;

// import java.util.Arrays;
// import java.util.Iterator;

//진입점이  
//실행클래스
//main메소드가 있는게 실행클래스

//단하나의 실행클래스 말고는 
//모두 참조클래스(라이브러리클래스)

//컨 f11
//컨 S 저장
//컨 / 주석
//컨 알 다운		한줄아래로 복사
//알 업  혹은 다운	한줄 이동
//빨리 단축키의 중요성	이클립스를 다룬다 이클립스 단축키

//컨쉬B 브레이크포인트
//컨쉬F 포맷팅
//컨쉬L		단축키
//컨 D		한줄삭제
//컨 스페이스	단축키호출
//F3

public class Main {
//	메인메소스 특별하다	

//      접근제한자
//      접근지시자
//          정적메소드
//          인스턴스화없이 바로사용
//              보이드 (Void)
//              리턴이없다.
//                  메소드명
//                  진입메소드 다름이름안됨
//                      매개변수 문자열배열이 전달될예정
	public static void main(String[] args) {
        입출력 연습1= new 입출력();
        연습1.이름입력받기();
        연습1.나이입력받기();


//		출력문 출력
//		내 눈으로 봐야 확인 눈으로 직접확인하기
//		디버깅 기본
//		print()
//		줄바꿈을 자동으로 넣어준다 (println)
//		System.out.println("안녕 자바공부재밌다"); // 세미콜론
//		직접줄바꿈
//		System.out.print("안녕 자바공부재밌다\n"); // 세미콜론
//		System.out.print("안녕 자바공부재밌다\n"); // 세미콜론
//		포멧
//		System.out.printf("%s 자바 %s 재밌다\n", "안녕", "공부"); // 세미콜론
//		System.out.printf("%d 자바 %d 재밌다\n", 1, 4); // 세미콜론
//		System.out.printf("%.2f 자바 %d 재밌다\n", 1.34, 4); // 세미콜론
//		System.out.printf("%.2f 자바 %d 재밌다\n", 1.34, 4); // 세미콜론
//		
//		s(String) d(Data), f(Float) .2
		
//		문자열화
//		대입연산자
//		타입 (Sting) 변수명 (ex : 이름) = 
//		String 이름 = "홍길동"; //변수
//		String[] 이름= {"홍", "길", "동"};
//		System.out.println("안녕" + "하세요 " + Arrays.toString(이름)); // 세미콜론
//		System.out.printf("%c 문자열의 숫자는 %d 입니다.\n", 'A', 65);
//		System.out.printf("%c 문자열의 숫자는 %o 입니다.\n", 'A', 65);
//		System.out.printf("%c 문자열의 숫자는 %h 입니다.\n", 'A', 65);
//		System.out.printf("%c 문자열의 숫자는 %h 입니다.\n", 'A', 65);
//		System.out.printf("%c 문자열의 숫자는 %b 입니다.\n", 'A', 65);
//		정렬 출력
//		System.out.printf("%5d \n", 65);
//		System.out.printf("%10.4f \n", 5.0); // 앞부분은 전체 공간 중 10을 쓸거고 소수점 뒷쪽은 4 정도를 사용하겠다 라는 의미임
		

//		자바는 8종의 원시자료형 (프리미티브타입스) 이 있다.
//		나머지는 다 참조타입 Reference Types (레퍼런스 타입스) ~~
//		Boolean (true false)   1bit(컴퓨터에서 처리할 수 있는 최소 단위)의 8승이 1byte 
//		true    false
//		on      off
//		1        0
//		char a b c d 숫자 'A' 'a' 단따옴표로 표현하며 각각 다르다 2byte (2bit의 8승)
//		각 문자마다 할당된 숫자가 있다.
//		정수형 경우 (byte, short, int, long 경우 printf (%d) 로 표현 가능
//		실수형 경우 (float, double 경우 printf (%f) 로 표현 가능 
		

//		변수 : 변할 수 있는 수
//		그릇 
//		상자
//		메모리하고 같이 생각
//		추상적이다.
//		원시자료형(ex : 정수형, 실수형) 하면서 바이트 외우기
//		인트크기의 상자를 만들고 이름표를 붙힘
//		변수만들기
//		타입	이름	=	담을것
//		int 인트크기상자 = 23424;
//		오른쪽에서 왼쪽으로 담는다
		
//		String 이름 = "홍길동";
//		int 나이 = 20;
//		String 직업 = "학생";
		
//		이용하기
//		System.out.println(인트크기상자);
//		System.out.printf("%s의 나이는 %d 이고 직업은 %s 입니다.", 이름, 나이, 직업);
//		자기선언적 변수명 (특수문자안됨, 숫자 시작 안됨, 예약어 안됨 (ex : class))
//		자바에서는 카멜, 파스칼케이스를 코딩 케이스를 쓰인다.
//		boolean 가부 = false;
//		제어문하고 결함됨 turn false
//		조건문
//		반복문
//			true
//		if (가부) {
//			System.out.println("잘됨");
//		}
//		System.out.println("프로그램종료됨");
		
		
		// 중요
		//메모리 더 여럿으로 나눔
		//
		//두개로 나눔
		//
		//
		//원시자료형						참조자료형
		//스택								힙
		//빠르다					상대적으로 느리다
		//후입선출						바로접근
		//크기가고정되어있다				크기가가변
		//값							메모리주소
		//
		//원시자료형은 스택에 저장됨		참조자료형은 메모리주소는 스택에 저장, 값은 힙에 저장

//			형 (타입)변환	크기(바이트)
//			타입프로모션 자동형변환
//		
//			타입캐스팅 : 컴파일러가 알아서해줌 - 작은것을 큰것에 담을수있기때문
//										내가 명시적으로 해줘도 됨
//			타입컨버전 : 개발자가 해주는것 - 명시적으로 적극적으로 해주는것
//										큰것을 작은것에 우겨담을수는 없음
//										잘리고 들어감
//										바이트 숏 인트 롱
//			타입 컨버전
//				타입프로모션 - 자동변환
//				타입캐스팅 - 강제변환
//		타입컨버전
//		long 큰숫자 = (long)23;
//		System.out.println(큰숫자);
//		int 파이 = (int) 3.141592;
//		System.out.println(파이);
//		큰것을 작은것에 담을려면 손실이 있고
//		작은것을 큰것에 담는게 괜찮음

//입력 - 키보드입력, 마이크입력, 스캐너입력 ..
//출력 - 모니터출력, 스피커출력, 프린터기출력 ..
//
//사용자에게 키보드입력받기
//이름을 입력해주세요
//이름이 *** 이군요
//나이를 입력해주세요
//나이가 *** 이군요
		
	}
}




		

